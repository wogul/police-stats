{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","react_default","a","createElement","className","es","data","width","height","options","title","display","text","fontSize","legend","position","Component","App","getChartData","setState","labels","datasets","label","backgroundColor","components_Chart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4MAiEeA,cA7DX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,UAAWT,EAAMS,WAFjBR,wEAMd,OACIS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,KAAMX,KAAKI,MAAMC,UACjBO,MAAO,IACPC,OAAQ,IACRC,QAAS,CACLC,MAAO,CACHC,SAAS,EACTC,KAAM,iBACNC,SAAU,IAEdC,OAAQ,CACJH,SAAS,EACTI,SAAU,aAItBd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,KAAMX,KAAKI,MAAMC,UACjBO,MAAO,IACPC,OAAQ,IACRC,QAAS,CACLC,MAAO,CACHC,SAAS,EACTC,KAAM,iBACNC,SAAU,IAEdC,OAAQ,CACJH,SAAS,EACTI,SAAU,aAItBd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACIC,KAAMX,KAAKI,MAAMC,UACjBO,MAAO,IACPC,OAAQ,IACRC,QAAS,CACLC,MAAO,CACHC,SAAS,EACTC,KAAM,iBACNC,SAAU,IAEdC,OAAQ,CACJH,SAAS,EACTI,SAAU,qBArDlBC,aC0DLC,cAvDZ,SAAAA,IACC,IAAAzB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,IACIzB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,QACKI,MAAQ,CACTC,UAAU,IAHlBR,oFAUGG,KAAKuB,sDAMJvB,KAAKwB,SAAS,CAACnB,UAAW,CAC1BoB,OAAQ,CAAC,SAAS,SAAS,SAAS,cAAc,YAAY,eAC1DC,SAAU,CACV,CACIC,MAAO,aACPhB,KAAK,CACD,OACA,OACA,OACA,OACA,OACA,OAEJiB,gBAAgB,CACZ,0BACA,0BACA,0BACA,0BACA,2BACA,0BACA,iEAQhB,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAACqB,EAAD,CAAOxB,UAAWL,KAAKI,MAAMC,qBAjDrBgB,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.85130353.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar, Line, Pie} from 'react-chartjs-2';\r\n\r\nclass Chart extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {chartData: props.chartData}\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Chart\">\r\n                <Bar\r\n                    data={this.state.chartData}\r\n                    width={400}\r\n                    height={180}\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Largest cities',\r\n                            fontSize: 25\r\n                        },\r\n                        legend: {\r\n                            display: true,\r\n                            position: 'bottom'\r\n                        }\r\n                    }}\r\n                />\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    width={400}\r\n                    height={180}\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Largest cities',\r\n                            fontSize: 25\r\n                        },\r\n                        legend: {\r\n                            display: true,\r\n                            position: 'bottom'\r\n                        }\r\n                    }}\r\n                />\r\n                <Pie\r\n                    data={this.state.chartData}\r\n                    width={400}\r\n                    height={180}\r\n                    options={{\r\n                        title: {\r\n                            display: true,\r\n                            text: 'Largest cities',\r\n                            fontSize: 25\r\n                        },\r\n                        legend: {\r\n                            display: true,\r\n                            position: 'bottom'\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart from './components/Chart';\n\nclass App extends Component {\n   constructor()\n    {\n        super();\n        this.state = {\n            chartData:{}\n        }\n\n\n    }\n\n    componentWillMount() {\n       this.getChartData();\n    }\n\n    getChartData()\n    {\n        //Ajax calls here\n        this.setState({chartData: {\n        labels: ['Boston','London','Krakow','Minneapolis','Cambridge','New Bedford'],\n            datasets: [\n            {\n                label: 'Population',\n                data:[\n                    617594,\n                    181045,\n                    153060,\n                    106519,\n                    105162,\n                    95072\n                ],\n                backgroundColor:[\n                    'rgba(255, 99, 132, 0.6)',\n                    'rgba(54, 162, 235, 0.6)',\n                    'rgba(255, 206, 86, 0.6)',\n                    'rgba(75, 192, 192, 0.6)',\n                    'rgba(153, 102, 255, 0.6)',\n                    'rgba(255, 159, 64, 0.6)',\n                    'rgba(255, 99, 132, 0.6)'\n                ]\n            }\n        ]\n    }})\n    }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Chart chartData={this.state.chartData}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}